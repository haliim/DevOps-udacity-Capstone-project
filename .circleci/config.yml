# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy Kubernetes Cluster cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name Kub-Env-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name Kub-Env-frontend-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.3.2
    steps:
      - checkout
      - run:
          name: deploy-infrastructure
          command: |
              yum -y install tar gzip
      - run:
          name: Install Kubernetes Infrastructure
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/Kub-Env.yml \
                  --stack-name "Kub-Env-${CIRCLE_WORKFLOW_ID:0:7}" \
#                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=UdacityCapstoneProject
      - run:
          name: Fetch the public IP of the EC2 instance
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> .circleci/inventory.txt

      - run:
          name: Add IP to ansible inventory
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> .circleci/ansible/inventory.txt
              backendip=$(aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output=text)
#              curl -H "Content-Type: text/plain" -H "token: 44dcdd32-1ac6-4124-852c-6e4a6ed19cc6" --request PUT --data "$backendip" https://api.memstash.io/values/udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  Kubernetes:
    jobs:
      - deploy-infrastructure
